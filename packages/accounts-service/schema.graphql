type Query {
  accounts(userId: ID!, first: Int, after: String, last: Int, before: String, filter: AccountFilterInput, orderBy: OrderByInput = {field: "id", order: ASC}): AccountConnection
  getUserAccounts(userId: ID!, first: Int, after: String, last: Int, before: String, filter: AccountFilterInput): AccountConnection
  getTransactionHistory(accountId: ID!): [Transaction]
}

type Account
  @key(fields: "id")
{
  id: ID!
  _id: ID! @deprecated(reason: "Use 'id' instead. This field will be removed in a future version.")
  type: String!
  balance: Float!
  userId: ID!
}

input AccountFilterInput {
  type: String
  minBalance: Float
  maxBalance: Float
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum SortOrder {
  ASC
  DESC
}

input OrderByInput {
  field: String!
  order: SortOrder = ASC
  direction: SortOrder @deprecated(reason: "Use 'order' instead. This field will be removed in a future version.")
}

type Transaction {
  id: ID!
  accountId: ID!
  type: String!
  amount: Float!
  date: String!
}

extend type User
  @key(fields: "id")
{
  id: ID! @external
}